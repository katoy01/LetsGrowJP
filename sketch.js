// graphic to hold all of our tiles as one big image
let tilesetArtwork, playerArtwork;
let chicken_babyArt, chickenArt, cow_baby_brownArt, cow_brownArt;
let stage = 0;
let cnv;
let inventoryCanvas;
let startImage;
let inventoryArtwork;

let inventoryArray = [];
let inventoryTiles = [];
let displayItems = [];
let inventoryItems;
let cornSeeds;
let wheatSeeds;
let tomatoSeeds;
let milk;
let eggs;
let corn;
let tomato;
let wheat;

let cornSeedsArt, seedsEmpty;
let wheatSeedsArt;
let tomatoSeedsArt;
let milkArt, milkEmpty;
let eggsArt, eggsEmpty;
let cornArt, cornEmpty;
let tomatoArt, tomatoEmpty;
let wheatArt, wheatEmpty;

let numInventorySelected = 0;
let selectedStatus = false;

let gate;
let moo;
let cluck;
let harvest;
let plop;
let clickSound;
let walk;


// the size of each tile (32 x 32 square)
let worldTileSize = 32;
let inventoryTileSize = 64;
let playerTileSizeX = 32, playerTileSizeY = 32;

// ofsets for screen scrolling
let offsetX = 0;
let offsetY = -200;
let minOffsetX, minOffsetY;

let world = [
    //                          10                            20                            30                            40                            50                            60                            70                            80
    [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13],
    //                                           10                                                20                                                 30                                               40                                      50                                       60                                      70                                      80
    [13, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2222, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 2812, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 13],
    [13, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2370, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 2812, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 13],

    [13, 2369, 2521, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2518, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 2812, 3848, 3849, 1640, 1640, 3848, 3849, 1640, 1640, 3848, 3849, 1640, 1640, 1640, 13],
    //                                           10                                                20                                                 30                                             40                                        50                                         60                                          70                                          80
    [13, 2369, 2370, 3850, 3851, 3855, 4782, 4296, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4298, 607, 4005, 4006, 607, 607, 607, 3850, 3851, 607, 607, 607, 607, 607, 607, 607, 4003, 607, 4002, 607, 607, 607, 607, 607, 607, 2630, 2631, 607, 607, 607, 2812, 3996, 3997, 1640, 1640, 3996, 3997, 1640, 1640, 3996, 3997, 1640, 1640, 1640, 13],
    //start row of farm plots 
    //                                         10                                                20                                              30                                            40                                        50                                   60                                            70                                               80
    [13, 2369, 2370, 3998, 3999, 1207, 1059, 4444, 1647, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1503, 607, 3850, 3851, 607, 607, 1647, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1503, 607, 3850, 3851, 607, 607, 1203, 1059, 607, 607, 607, 3998, 3999, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 2778, 2779, 607, 607, 607, 2960, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2377, 2369, 2369, 13],
    //                                         10                                                20                                              30                                             40                                        50                                            60                                             70                                              80
    [13, 2369, 2370, 3855, 909, 909, 1060, 4444, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 3998, 3999, 607, 607, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 3998, 3999, 607, 4152, 1205, 1060, 4152, 607, 607, 607, 607, 607, 607, 607, 3850, 3851, 607, 4151, 607, 607, 1095, 1096, 1097, 1098, 1099, 607, 607, 2778, 2779, 607, 607, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4298, 607, 607, 2812, 2369, 2369, 13],
    //                                         10                                             20                                              30                                             40                                         50                                             60                                               70                                              80
    [13, 2369, 2370, 1205, 909, 909, 1060, 4444, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 607, 3850, 3851, 607, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 607, 607, 607, 4152, 1205, 1060, 4152, 607, 607, 607, 607, 4002, 607, 607, 3998, 3999, 607, 607, 607, 607, 1243, 1244, 1245, 1246, 1247, 3072, 3073, 3074, 3075, 3076, 3077, 1207, 1207, 2584, 2585, 2586, 1207, 1207, 1697, 1697, 4446, 607, 607, 2812, 2369, 2369, 13],
    //edge row right above bpttom row of plot 
    //                                         10                                             20                                              30                                               40                                        50                                           60                                               70                                           80
    [13, 2369, 2370, 1205, 909, 909, 1060, 4444, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 607, 3998, 3999, 607, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 3850, 3851, 607, 4152, 1205, 1060, 4152, 607, 607, 4152, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1391, 1392, 1393, 1394, 1395, 3220, 3221, 3222, 3223, 3224, 3225, 908, 908, 2732, 2733, 2734, 2882, 908, 908, 1697, 4446, 607, 607, 2812, 2369, 2369, 13],
    //end row of farm plots 
    //                                         10                                              20                                              30                                               40                                        50                                           60                                               70                                           80
    [13, 2369, 2370, 1205, 909, 909, 1060, 4444, 1501, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1500, 607, 3850, 3851, 607, 607, 1501, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1500, 607, 3998, 3999, 607, 4004, 1205, 1060, 4004, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1539, 1540, 1541, 1542, 1543, 607, 3369, 3370, 3371, 3372, 908, 908, 908, 908, 908, 908, 908, 908, 908, 1697, 4446, 607, 607, 2812, 2369, 2369, 13],
    //^10th row
    //                                         10                                               20                                                 30                                                40                                                50                                           60                                               70                                           80
    //end corner row of fence                                     4299 is gate                                                                                                                                               4591 below                                                                                                                      1060 is side dirt
    [13, 2369, 2370, 1205, 909, 909, 1060, 4592, 4593, 4593, 4593, 4593, 4593, 4299, 4593, 4593, 4593, 4593, 3998, 3999, 4593, 4593, 4593, 4593, 4593, 4593, 4299, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4589, 1205, 1060, 4588, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 1687, 1688, 1689, 1690, 1691, 4593, 3517, 3518, 3519, 3520, 908, 908, 908, 908, 908, 908, 908, 908, 908, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                                                                                                                                                                                                               1546 below
    //                                         10                                               20                                               30                                              40                                         50                                        60                                      70                                           80
    [13, 2369, 2370, 1205, 909, 909, 1208, 1207, 1207, 1207, 1207, 1207, 1209, 909, 1208, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1209, 909, 1208, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1209, 1198, 1207, 1207, 3854, 3854, 4591, 908, 908, 908, 908, 908, 909, 908, 1398, 1398, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 908, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                        10                                             20                                             30                                                40                                         50                                      60                                      70                                           80
    [13, 2369, 2370, 1205, 909, 909, 909, 3721, 3721, 3721, 3721, 3721, 909, 909, 909, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 909, 909, 909, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 909, 909, 909, 909, 909, 3854, 4591, 1697, 909, 909, 909, 909, 909, 909, 1545, 1546, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                     10                                      20                                      30                                       40                                         50                                      60                                      70                                          80
    [13, 2369, 2370, 1205, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4591, 2725, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                     10                                      20                                      30                                       40                                         50                                      60                                      70                                          80
    [13, 2369, 2370, 1205, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4591, 2873, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                        10                                               20                                               30                                                40                                         50                                      60                                      70                                           80
    [13, 2369, 2370, 1205, 909, 909, 1062, 1058, 1058, 1058, 1058, 1206, 909, 1062, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1206, 909, 1062, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1206, 909, 909, 909, 1060, 4591, 1205, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                         10                                               20                                                30                                                40                                         50                                      60                                      70                                           80
    [13, 2369, 2370, 1205, 909, 909, 1060, 4296, 4297, 4297, 4297, 4297, 4299, 4297, 4297, 4297, 4297, 4297, 4297, 3850, 3851, 4440, 4297, 4297, 4297, 4441, 4299, 4440, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4298, 1205, 909, 909, 909, 1060, 4591, 2725, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                         10                                               20                                               30                                           40                                         50                                      60                                      70                                           80
    [13, 2369, 2370, 1205, 909, 909, 1060, 4446, 1647, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1503, 607, 3998, 3999, 607, 1647, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1503, 607, 607, 607, 607, 4446, 1205, 909, 909, 909, 1060, 4591, 2873, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                         10                                               20                                               30                                           40                                         50                                      60                                      70                                           80    
    [13, 2369, 2370, 1205, 909, 909, 1060, 4446, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 3850, 3851, 607, 607, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 607, 607, 607, 4446, 1205, 909, 909, 909, 1060, 4591, 1205, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                         10                                               20                                               30                                             40                                         50                                      60                                      70                                           80    
    [13, 2369, 2370, 1205, 909, 909, 1060, 4446, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 3998, 3999, 607, 607, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 3850, 3851, 607, 4446, 1205, 909, 909, 909, 1060, 4591, 1205, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 4446, 607, 607, 2812, 2369, 2369, 13],
    //^20th row
    //                                         10                                               20                                            30                                             40                                             50                                                60                                                70                                             80    
    [13, 2369, 2370, 1205, 909, 909, 1060, 4446, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 607, 607, 607, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 3998, 3999, 607, 4446, 1205, 909, 909, 909, 1060, 4446, 1057, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1206, 1062, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1399, 1400, 1058, 1058, 1058, 1058, 1058, 1056, 4446, 607, 607, 2812, 2369, 2369, 13],
    //                                         10                                               20                                            30                                            40                                             50                                                60                                                70                                            80    
    [13, 2369, 2370, 1205, 909, 909, 1060, 4446, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 607, 607, 607, 1649, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1504, 607, 607, 607, 607, 4446, 1205, 909, 909, 909, 1060, 4592, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4299, 4299, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4594, 607, 607, 2812, 2369, 2369, 13],
    //                                         10                                               20                                            30                                           40                                             50                                                60                                                70                                             80    
    [13, 2369, 2370, 1205, 909, 909, 1060, 4446, 1501, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1500, 607, 607, 607, 607, 1501, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1500, 607, 607, 607, 607, 4446, 1205, 909, 909, 909, 1208, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1209, 1208, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1059, 607, 607, 2812, 2369, 2369, 13],
    //                                         10                                                20                                               30                                           40                                        50                                       60                                     70                                           80   
    [13, 2369, 2370, 1205, 909, 909, 1060, 4592, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4593, 4594, 1205, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 607, 607, 2812, 2369, 2369, 13],
    //                                       10                                            20                                       30                                      40                                      50                                       60                                     70                                          80   
    [13, 2369, 2370, 1205, 909, 909, 1060, 607, 607, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1205, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 607, 607, 2812, 2369, 2369, 13],
    //                                       10                                             20                                       30                                       40                                              50                                                60                                                70                                             80   
    [13, 2369, 2370, 1205, 909, 909, 1060, 607, 607, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 607, 607, 4004, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1205, 909, 909, 1062, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1056, 607, 607, 2812, 2369, 2369, 13],
    //                                       10                                             20                                         30                                       40                                          50                                      60                                      70                                         80   
    [13, 2369, 2370, 1205, 909, 909, 1060, 6958, 607, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 607, 607, 607, 607, 607, 3850, 3851, 607, 607, 607, 607, 4004, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1205, 909, 909, 1060, 607, 3850, 3851, 607, 4003, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 2812, 2369, 2369, 13],
    //                                       10                                              20                                         30                                      40                                          50                                            60                                                70                                           80   
    [13, 2369, 2370, 1205, 909, 909, 1060, 7106, 607, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 607, 607, 4003, 607, 607, 3998, 3999, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1205, 909, 909, 1060, 607, 3998, 3999, 607, 607, 607, 607, 607, 607, 607, 1802, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 1946, 607, 607, 607, 607, 2812, 2369, 2369, 13],
    //                                        10                                              20                                         30                                    40                                          50                                            60                                                70                                           80   
    [13, 2369, 2370, 1205, 909, 909, 1060, 7254, 3857, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 4003, 607, 1205, 909, 909, 1060, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1800, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1945, 607, 607, 607, 607, 2812, 2369, 2369, 13],
    //                                      10                                        20                                      30                                        40                                      50                                              60                                                70                                           80    
    [13, 2369, 2370, 1205, 909, 909, 1060, 607, 607, 607, 607, 1205, 909, 1060, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1205, 909, 909, 1060, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1800, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1945, 607, 607, 607, 607, 2812, 2369, 2369, 13],
    //^30th row 
    //                                        10                                               20                                                30                                                40                                       50                                              60                                                70                                             80    
    [13, 2369, 2370, 1205, 909, 909, 1208, 1207, 1207, 1207, 1207, 1209, 909, 1208, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1209, 909, 909, 1060, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1800, 1936, 1936, 1936, 1936, 1936, 2226, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1945, 607, 3850, 3851, 607, 2812, 2369, 2369, 13],
    //                                     10                                      20                                      30                                      40                                        50                                              60                                                70                                             80    
    [13, 2369, 2370, 1205, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 6958, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1800, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1945, 607, 3998, 3999, 607, 2812, 2369, 2369, 13],
    //                                      10                                      20                                      30                                      40                                         50                                              60                                                70                                           80    
    [13, 2369, 2370, 1205, 6958, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 909, 1060, 7106, 607, 607, 607, 607, 4782, 607, 607, 607, 607, 1800, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 2226, 1936, 1936, 1936, 1936, 1945, 607, 607, 607, 607, 2812, 2369, 2369, 13],
    //                                      10                                      20                                      30                                      40                                         50                                              60                                                70                                           80    
    [13, 2369, 2370, 4155, 7106, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 607, 7254, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1800, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1945, 607, 4004, 607, 607, 2812, 2369, 2369, 13],
    //                                      10                                          20                                      30                                      40                                      50                                              60                                                70                                           80    
    [13, 2369, 2370, 607, 7254, 3856, 607, 607, 607, 3850, 3851, 607, 607, 607, 607, 607, 3850, 3851, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1800, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1929, 1947, 1947, 1947, 1949, 607, 607, 607, 607, 2812, 2369, 2369, 13],
    //                                       10                                          20                                      30                                      40                                      50                                             60                                               70                                         80    
    [13, 2369, 2369, 2371, 2222, 4155, 607, 607, 607, 3998, 3999, 607, 607, 607, 607, 607, 3998, 3999, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 1948, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1945, 607, 607, 607, 607, 607, 607, 607, 607, 2368, 2369, 2369, 13],
    //                                          10                                                20                                                30                                                40                                             50                                            60                                               70                                               80    
    [13, 2369, 2369, 2369, 2369, 2376, 3850, 3851, 2376, 2376, 2376, 2376, 2376, 3850, 3851, 2376, 2376, 2376, 2376, 2376, 2376, 3850, 3851, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2222, 607, 607, 607, 607, 607, 607, 607, 1948, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1945, 607, 607, 2220, 2221, 2221, 2221, 2221, 2221, 2369, 2369, 2369, 13],
    //                                          10                                                20                                                30                                                40                                             50                                            60                                               70                                               80    
    [13, 2369, 2369, 2369, 2369, 2369, 3998, 3999, 2369, 2369, 2369, 2369, 2369, 3998, 3999, 2369, 2369, 4155, 2369, 2369, 2369, 3998, 3999, 2369, 4155, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2370, 607, 607, 607, 607, 4003, 607, 607, 607, 1948, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1949, 607, 607, 2368, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 13],
    //                                          10                                                20                                                30                                                40                                             50                                            60                                               70                                               80    
    [13, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2370, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 2368, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 13],
    [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13],
    //^40th row
]


// handle the tile loading and creating our player object in preload before the game can start
function preload() {
    tilesetArtwork = loadImage('./assets/image/global.png');
    inventoryArtwork = loadImage('./assets/image/global.png');
    playerArtwork = loadImage('./assets/image/player.png');
    chicken_babyArt = loadImage('./assets/image/chicken_baby.png');
    chickenArt = loadImage('./assets/image/chicken.png');
    cow_baby_brownArt = loadImage('./assets/image/cow_baby_brown.png');
    cow_brownArt = loadImage('./assets/image/cow_brown.png');

    startImage = loadImage("./assets/image/startScreen.jpg");
    inventoryCanvas = loadImage("./assets/image/inventory.png");

    inventoryTiles[0] = loadImage('./assets/image/tomatoseeds.png');
    inventoryTiles[1] = loadImage('./assets/image/wheatseeds.png');
    inventoryTiles[2] = loadImage('./assets/image/cornseeds.png');
    inventoryTiles[3] = loadImage('./assets/image/tomato.png');
    inventoryTiles[4] = loadImage('./assets/image/wheat.png');
    inventoryTiles[5] = loadImage('./assets/image/corn.png');
    inventoryTiles[6] = loadImage('./assets/image/milk.png');
    inventoryTiles[7] = loadImage('./assets/image/egg.png');

    gate = loadSound("./assets/sound/gate.wav");
    moo = loadSound("./assets/sound/moo.wav");
    harvest = loadSound("./assets/sound/harvest_crop.ogg");
    walk = loadSound("./assets/sound/walk.wav");
    plop = loadSound("./assets/sound/seed_plant.ogg");
    cluck = loadSound("./assets/sound/chicken.wav");
    clickSound = loadSound("./assets/sound/click.wav");

}

// overlays for our world
let overlay = [];

let player;
let plantArr = [];
let cow, cowBaby, chicken, chickenBaby;
let animalArr = [];

let plantInfoAll = {
    'wheat': {
        bagId: 6379,
        sproutArr: [6380, 6381, 6382, 6383, 6384],
        harvestableId: 6385,
        inventoryId: 5969
    },
    'tomato': {
        bagId: 5195,
        sproutArr: [5196, 5197, 5198, 5199, 5200],
        harvestableId: 5201,
        inventoryId: 5961
    },
    'corn': {
        bagId: 5639,
        sproutArr: [5640, 5641, 5642, 5643, 5644],
        harvestableId: 5645,
        inventoryId: 5964
    }
}

let animalInfoAll = {
    'cow': {
        img: cow_brownArt,
        tileSize: 48
    },
    'cowBaby': {
        img: cow_brownArt,
        tileSize: 42
    },
    'chicken': {
        img: chickenArt,
        tileSize: 32
    },
    'chickenBaby': {
        img: chicken_babyArt,
        tileSize: 32
    }
}

/**
 * p5 FUNCTIONS
 */

// create canvas & player object
function setup() {
    cnv = createCanvas(960, 480);
    background(255);
    cnv.parent('gameCanvas');
    // cellWidth = width/columns;
    // cellHeight = height / 4;

    stroke(0);
    strokeWeight(1);

    // inventory = createGraphics(cnv.parent.width, cnv.parent.height)
    rows = 1;
    cols = 8;

    tilesetArtwork.resize(4736, 2272);
    //inventoryCanvas.resize(960, 480);
    playerArtwork.resize(128, 128);
    chicken_babyArt.resize(128, 160);
    chickenArt.resize(128, 160);
    cow_baby_brownArt.resize(168, 210);
    cow_brownArt.resize(192, 240);

    animalInfoAll['cow'].img = cow_brownArt;
    animalInfoAll['cowBaby'].img = cow_baby_brownArt;
    animalInfoAll['chicken'].img = chickenArt;
    animalInfoAll['chickenBaby'].img = chicken_babyArt;

    // setup the world overlay
    setupOverlay();

    minOffsetX = (width) - (world[0].length * worldTileSize);
    minOffsetY = (height) - (world.length * worldTileSize);

    // create our player
    player = new Player(width / 2, height / 2);

    cow = new Animal(52, 15, 'cow');
    cowBaby = new Animal(54, 15, 'cowBaby');
    chicken = new Animal(66, 13, 'chicken');
    chickenBaby = new Animal(68, 15, 'chickenBaby');
    animalArr.push(cow, cowBaby, chicken, chickenBaby);

    inventoryItems = [
        cornSeeds = new Item("Corn Seeds", 10, cornSeedsArt),
        wheatSeeds = new Item("Wheat Seeds", 10, wheatSeedsArt),
        tomatoSeeds = new Item("Tomato Seeds", 10, tomatoSeedsArt),
        corn = new Item("Corn", 0, cornEmpty),
        wheat = new Item("Wheat", 0, wheatEmpty),
        tomato = new Item("Tomato", 0, tomatoEmpty),
        milk = new Item("Milk", 0, milkEmpty),
        eggs = new Item("Eggs", 0, eggsEmpty)
    ];
    console.log(inventoryItems);
    for (let i of inventoryItems) {
        // if(i.amount > 0 ){
        inventoryArray.push(i);
        // } 
    };
}

function mouseClicked() {
    if (stage === 0) {
        stage = 1;
        clickSound.play();
    }
    if (stage === 2 && selectedStatus === true) {
        player.changeEnvironment();
        stage = 1;
        selectedStatus = false;
        numInventorySelected = 0;
        clickSound.play();
    }
}

function keyPressed() {
    if (keyCode === 13 && stage === 1) {
        player.changeEnvironment();
    }
    if (stage === 2) {
        if (keyCode === 49) {
            selectedStatus = true;
            numInventorySelected = 1;
        }
        if (keyCode === 50) {
            selectedStatus = true;
            numInventorySelected = 2;
        }
        if (keyCode === 51) {
            selectedStatus = true;
            numInventorySelected = 3;
        }
        if (keyCode === 52) {
            selectedStatus = true;
            numInventorySelected = 4;
        }
        if (keyCode === 53) {
            selectedStatus = true;
            numInventorySelected = 5;
        }
        if (keyCode === 54) {
            selectedStatus = true;
            numInventorySelected = 6;
        }
        if (keyCode === 55) {
            selectedStatus = true;
            numInventorySelected = 7;
        }
        if (keyCode === 56) {
            selectedStatus = true;
            numInventorySelected = 8;
        }
        if (keyCode === 27) {
            selectedStatus = false;
            numInventorySelected = 0;
            stage = 1;
        }
    }

}

function draw() {
    // draw the world and the character

    if (stage === 0) {
        background(113, 143, 63);
        image(startImage, 0, 0, 960, 480);
    }

    if (stage === 1) {
        background(113, 143, 63);
        push();
        translate(offsetX, offsetY);
        drawWorld();
        pop();

        // the character will always be drawn in the middle of the screen
        player.moveAndDisplay();
        plantArr.forEach(plant => {
            plant.display();
        });
        animalArr.forEach(animal => {
            animal.moveAndDisplay();
        })
    }

    if (stage === 2) {
        background(255);
        inventoryBuffer = createGraphics(660, 330);
        inventoryBuffer.image(inventoryCanvas, 0, 0);
        image(inventoryBuffer, 0, 0);
        displaySelectedBox(numInventorySelected);
        //image(inventoryCanvas,0,0,960,480);
        textAlign(CENTER);
        fill(0);
        textSize(15);
        if (selectedStatus == true) {
            if (numInventorySelected == 1) {
                text("You selected tomato seeds. You have " + tomatoSeeds.amount + " left", width - width / 5, height / 4 + 25);
                text("Click To Continue", width - width / 5, height / 4 + 50);
                text("Press `esc` to go back", width - width / 5, height / 4 + 75);
            }
            if (numInventorySelected == 2) {
                text("You selected wheat seeds. You have " + wheatSeeds.amount + " left", width - width / 5, height / 4 + 25);
                text("Click To Continue", width - width / 5, height / 4 + 50);
                text("Press `esc` to go back", width - width / 5, height / 4 + 75);
            }
            if (numInventorySelected == 3) {
                text("You selected corn seeds. You have " + cornSeeds.amount + " left", width - width / 5, height / 4 + 25);
                text("Click To Continue", width - width / 5, height / 4 + 50);
                text("Press `esc` to go back", width - width / 5, height / 4 + 75);
            }
            if (numInventorySelected == 4) {
                text("You selected tomatos. You have " + tomato.amount + " left", width - width / 5, height / 4 + 25);
                text("Click To Continue", width - width / 5, height / 4 + 50);
                text("Press `esc` to go back", width - width / 5, height / 4 + 75);
            }
            if (numInventorySelected == 5) {
                text("You selected wheat. You have " + wheat.amount + " left", width - width / 5, height / 4 + 25);
                text("Click To Continue", width - width / 5, height / 4 + 50);
                text("Press `esc` to go back", width - width / 5, height / 4 + 75);
            }
            if (numInventorySelected == 6) {
                text("You selected corn. You have " + corn.amount + " left", width - width / 5, height / 4 + 25);
                text("Click To Continue", width - width / 5, height / 4 + 50);
                text("Press `esc` to go back", width - width / 5, height / 4 + 75);
            }

            if (numInventorySelected == 7) {
                text("You selected milk. You have " + milk.amount + " left", width - width / 5, height / 4 + 25);
                text("Click To Continue", width - width / 5, height / 4 + 50);
                text("Press `esc` to go back", width - width / 5, height / 4 + 75);
            }
            if (numInventorySelected == 8) {
                text("You selected eggs. You have " + eggs.amount + " left", width - width / 5, height / 4 + 25);
                text("Click To Continue", width - width / 5, height / 4 + 50);
                text("Press `esc` to go back", width - width / 5, height / 4 + 75);
            }
        } else {
            text("Please enter what number you want to use", width - width / 5, height / 4 + 25);
            text("Press `esc` to go back", width - width / 5, height / 4 + 50);
        }
        fill(255);
    }
}


/**
 * HELPER FUNCTIONS
 */

// draw the entire world using the 2D array above
function drawWorld() {
    for (let y = 0; y < world.length; y++) {
        for (let x = 0; x < world[y].length; x++) {
            // extract the tile here
            let id = world[y][x];
            drawTile(tilesetArtwork, id, worldTileSize, worldTileSize, x * worldTileSize, y * worldTileSize);

            // also draw the overlay here
            let idOverlay = overlay[y][x];
            drawTile(tilesetArtwork, idOverlay, worldTileSize, worldTileSize, x * worldTileSize, y * worldTileSize);
        }
    }
}

// draw tile with an ID of i and position x,y
function drawTile(img, id, tileSizeX, tileSizeY, screenX, screenY) {
    // step 1: figure out how many tiles are on each row of our image
    let tilesPerRow = int(img.width / tileSizeX);

    // step 2: give the tile ID, figure out where that tile exists
    // in the source image.
    let imageX = int(id % tilesPerRow) * tileSizeX;
    let imageY = int(id / tilesPerRow) * tileSizeY;

    // step 3: draw the desired tile
    image(img, screenX, screenY, tileSizeX, tileSizeY,
        imageX, imageY, tileSizeX, tileSizeY);
}

// setup our overlay array
function setupOverlay() {
    // set up the overlay to be the same size as the world, just filled with -1's
    for (let y = 0; y < world.length; y++) {
        overlay.push([]);
        for (let x = 0; x < world[y].length; x++) {
            if (world[y][x] === 4299) {
                overlay[y].push(4299);
                world[y][x] = 607;
            } else {
                overlay[y].push(-1);
            }
        }
    }
}

// obtain the tile ID at a given screen coordinate
function getWorldTileAtPosition(screenX, screenY) {
    // convert screen coordinates into array coordinates
    let arrayX = int((screenX - offsetX) / worldTileSize);
    let arrayY = int((screenY - offsetY) / worldTileSize);

    let id = world[arrayY][arrayX];
    return id;
}

function getOverlayTileAtPosition(screenX, screenY) {
    // convert screen coordinates into array coordinates
    let arrayX = int((screenX - offsetX) / worldTileSize);
    let arrayY = int((screenY - offsetY) / worldTileSize);

    let id = overlay[arrayY][arrayX];
    return id;
}

function setOverlayAtPosition(id, screenX, screenY) {
    // convert screen coordinates into array coordinates
    let arrayX = int((screenX - offsetX) / worldTileSize);
    let arrayY = int((screenY - offsetY) / worldTileSize);

    if (world[arrayY][arrayX] != undefined) {
        overlay[arrayY][arrayX] = id;
    }
}

function setOverlayAtPositionArr(id, arrayX, arrayY) {
    // convert screen coordinates into array coordinates
    if (world[arrayY][arrayX] != undefined) {
        overlay[arrayY][arrayX] = id;
    }
}

function isSolid(id) {
    // return true for all solid tiles
    if (id === 13 || id == 2370 || id == 3998 || id == 3999 || id == 3850 || id == 3851 || id == 4297 || id == 4296 ||
        id == 4446 || id == 4440 || id == 4441 || id == 4299 || id == 4005 || id == 4006 || id == 4591 || id == 2725
        || id == 2873 || id == 6958 || id == 7106 || id == 7254 || id == 4155 || id == 3857 || id == 3856 || id == 2376 || id == 459 || id == 4593
        || id == 1697 || id == 1687 || id == 1688 || id == 1689 || id == 1690 || id == 1691 || id == 3517 || id == 3518 || id == 3519 || id == 3520
        || id == 3014 || id == 3162 || id == 3310 || id == 3458 || id == 3606 || id == 3607 || id == 3608 || id == 3609 || id == 3610 || id == 3611 || id == 3612
        || id == 3020 || id == 3168 || id == 3316 || id == 3464 || id == 3612 || id == 1786 || id == 1788
        || id == 1934 || id == 1933 || id == 1788 || id == 1784 || id == 1931 || id == 1935 || id == 1936 || id == 2368 || id == 2220 || id == 2221
        || id == 2368 || id == 2812 || id == 2517 || id == 2961 || id == 1095 || id == 1243 || id == 1391 || id == 1539 || id == 3072
        || id == 3077 || id == 3225 || id == 2584 || id == 2585 || id == 2586 || id == 1545 || id == 1546 || id == 3372 || id == 3324
        || id == 3224 || id == 3369 || id == 3221 || id == 3721 || id == 1096 || id == 1097 || id == 1098 || id == 1099
        || id == 1247 || id == 2360 || id == 2631 || id == 2778 || id == 2779 || id == 2926 || id == 2927 || id == 3074
        || id == 3075 || id == 3073 || id == 3072 || id == 3071 || id == 3076 || id == 3078 || id == 2882 || id == 3854
        || id == 3856 || id == 3720 || id == 3722 || id == 4588 || id == 4589 || id == 4595 || id == 4596
        || id == 4303 || id == 4304 || id == 4305 || id == 2664 || id == 2220 || id == 4444 || id == 4451
        || id == 2087 || id == 1800 || id == 1948 || id == 1947 || id == 1949 || id == 1945 || id == 1929 || id == 1946
        || id == 4296 || id == 4592 || id == 4589 || id == 4298) {
        return true;
    }
    return false;
}

function noAnimals(realX, realY, selfTileSize) {
    for (let index = 0; index < animalArr.length; index++) {
        if (dist(realX, realY, animalArr[index].x, animalArr[index].y) <= (animalArr[index].animalInfo.tileSize / 2 + selfTileSize / 2)) {
            return false;
        }
    }
    return true;
}

function interactOverlay(x, y) {
    // console.log(int((x - offsetX) / worldTileSize), int((y - offsetY) / worldTileSize));
    if (getOverlayTileAtPosition(x, y) === 4299) {
        setOverlayAtPosition(4300, x, y);
    } else if (getOverlayTileAtPosition(x, y) === 4300) {
        setOverlayAtPosition(4299, x, y);
    }
    if (getWorldTileAtPosition(x, y) === 1353) {
        if (getOverlayTileAtPosition(x, y) === -1) {
            stage = 2;
            console.log(inventoryArray);
        }
        if (getOverlayTileAtPosition(x, y) === 6385) {
            harvest.play();
            setOverlayAtPosition(-1, x, y);
            wheat.amount = wheat.amount + 1;
            console.log(inventoryArray);
        }
        if (getOverlayTileAtPosition(x, y) === 5645) {
            harvest.play();
            setOverlayAtPosition(-1, x, y);
            corn.amount = corn.amount + 1;
            console.log(inventoryArray);
        }
        if (getOverlayTileAtPosition(x, y) === 5201) {
            harvest.play();
            setOverlayAtPosition(-1, x, y);
            tomato.amount = tomato.amount + 1;
            console.log(inventoryArray);
        }
    }
    if (stage === 2 && selectedStatus === true) {
        if (numInventorySelected == 1) {
            let plant = new Plant(x, y, 'tomato');
            plantArr.push(plant);
            plop.play();
            tomatoSeeds.amount = tomatoSeeds.amount - 1;
        }
        if (numInventorySelected == 2) {
            let plant = new Plant(x, y, 'wheat');
            plantArr.push(plant);
            plop.play();
            wheatSeeds.amount = wheatSeeds.amount - 1;
        }
        if (numInventorySelected == 3) {
            let plant = new Plant(x, y, 'corn');
            plantArr.push(plant);
            plop.play();
            cornSeeds.amount = cornSeeds.amount - 1;
        }
    }
}

function displaySelectedBox(itemNum) {
    if (!selectedStatus) {
        return;
    }

    stroke(255);
    strokeWeight(3);

    let yMin, yMax, xMin, xMax;
    let itemSize = 37;
    let itemDist = itemSize + 9;
    yMin = 160;
    yMax = yMin + itemSize;

    xMin = 87 + ((itemNum - 1) * itemDist);
    xMax = xMin + itemSize;

    line(xMin, yMin, xMax, yMin);
    line(xMin, yMax, xMax, yMax);
    line(xMin, yMin, xMin, yMax);
    line(xMax, yMin, xMax, yMax);

    noStroke();
}


/**
 * CLASSES
 */
class Player {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.speed = 5;
        // 0 = down
        // 1 = right
        // 2 = left
        // 3 = up
        this.direction = 0;
        this.walking = true;

        this.totalFrames = 4;
        this.currentFrame = 0;
        this.pauseCounter = 0;
        this.pauseCounterMax = 20;

        this.facingTile = [];

        this.tileSize = 32;
    }

    computeSensors() {
        this.middleX = this.x;
        this.middleY = this.y;
        this.left = int(this.x - this.tileSize / 2 - 2);
        this.right = int(this.x + this.tileSize / 2 + 2);
        this.up = int(this.y - this.tileSize / 2 - 2);
        this.down = int(this.y + this.tileSize / 2 + 2);
    }

    changeEnvironment() {
        let tempX, tempY;
        if (this.direction === 0) {
            tempX = this.middleX;
            tempY = this.down;
        } else if (this.direction === 1) {
            tempX = this.right;
            tempY = this.middleY;
        } else if (this.direction === 2) {
            tempX = this.left;
            tempY = this.middleY;
        } else {
            tempX = this.middleX;
            tempY = this.up;
        }
        interactOverlay(tempX, tempY);
        for (let index = 0; index < animalArr.length; index++) {
            animalArr[index].lookAtPlayer(tempX, tempY);
        }
    }

    moveAndDisplay() {
        imageMode(CENTER);
        this.facing = [];
        this.computeSensors();
        this.walking = false;
        if (this.walking == true) {
            walk.play();
            walk.loop();
        }
        else {
            walk.stop();
        }

        if (keyIsDown(68)) {
            // ellipse(this.right, this.middleY, 5, 5);
            let id = getWorldTileAtPosition(this.right, this.middleY);
            let id2 = getOverlayTileAtPosition(this.right, this.middleY);
            if (!isSolid(id) && !isSolid(id2) && noAnimals(this.right - offsetX, this.middleY - offsetY, this.tileSize)) {
                if (offsetX > minOffsetX && this.x === (width / 2)) {
                    offsetX -= this.speed;
                } else {
                    this.x += this.speed;
                }
            }
            if (!keyIsDown(87) && !keyIsDown(83)) {
                this.direction = 1;
            }
            this.walking = true;


        }
        if (keyIsDown(65)) {
            // ellipse(this.left, this.middleY, 5, 5);
            let id = getWorldTileAtPosition(this.left, this.middleY);
            let id2 = getOverlayTileAtPosition(this.left, this.middleY);
            if (!isSolid(id) && !isSolid(id2) && noAnimals(this.left - offsetX, this.middleY - offsetY, this.tileSize)) {
                if (offsetX < 0 && this.x === (width / 2)) {
                    offsetX += this.speed;
                } else {
                    this.x -= this.speed;
                }
            }
            if (!keyIsDown(87) && !keyIsDown(83)) {
                this.direction = 2;
            }
            this.walking = true;
        }
        if (keyIsDown(87)) {
            // ellipse(this.middleX, this.up, 5, 5);
            let id = getWorldTileAtPosition(this.middleX, this.up);
            let id2 = getOverlayTileAtPosition(this.middleX, this.up);
            if (!isSolid(id) && !isSolid(id2) && noAnimals(this.middleX - offsetX, this.up - offsetY, this.tileSize)) {
                if (offsetY < 0 && this.y === (height / 2)) {
                    offsetY += this.speed;
                } else {
                    this.y -= this.speed;
                }
            }
            if (!keyIsDown(68) && !keyIsDown(65)) {
                this.direction = 3;
            }
            this.walking = true;
        }
        if (keyIsDown(83)) {
            // ellipse(this.middleX, this.down, 5, 5);
            let id = getWorldTileAtPosition(this.middleX, this.down);
            let id2 = getOverlayTileAtPosition(this.middleX, this.down);
            if (!isSolid(id) && !isSolid(id2) && noAnimals(this.middleX - offsetX, this.down - offsetY, this.tileSize)) {
                if (offsetY > minOffsetY && this.y === (height / 2)) {
                    offsetY -= this.speed;
                } else {
                    this.y += this.speed;
                }
            }
            if (!keyIsDown(68) && !keyIsDown(65)) {
                this.direction = 0;
            }
            this.walking = true;
        }

        // frame animation
        if (this.walking) {
            this.pauseCounter--;

            if (this.pauseCounter <= 0) {
                this.currentFrame += 1;
                if (this.currentFrame >= this.totalFrames) {
                    this.currentFrame = 0;
                }
                this.pauseCounter = this.pauseCounterMax;
            }

            drawTile(playerArtwork, (this.direction * 4) + this.currentFrame, playerTileSizeX, playerTileSizeY, this.x, this.y);
        } else {
            drawTile(playerArtwork, (this.direction * 4), playerTileSizeX, playerTileSizeY, this.x, this.y);
        }
        imageMode(CORNER);
    }
}

class Plant {
    constructor(screenX, screenY, plantName) {
        this.arrayX = int((screenX - offsetX) / worldTileSize);
        this.arrayY = int((screenY - offsetY) / worldTileSize);
        this.plantInfo = plantInfoAll[plantName];
        this.sproutPos = 0;
        setOverlayAtPositionArr(this.plantInfo.sproutArr[this.sproutPos], this.arrayX, this.arrayY);
        this.maxFrames = 120;
        this.currentFrames = 0;
        // 0 = growing
        // 1 = harvestable
        this.state = 0;
    }

    display() {
        if (this.state === 0) {
            if (this.currentFrames >= this.maxFrames) {
                this.sproutPos++;
                if (this.sproutPos < this.plantInfo.sproutArr.length) {
                    setOverlayAtPositionArr(this.plantInfo.sproutArr[this.sproutPos], this.arrayX, this.arrayY);
                    this.currentFrames = 0;
                } else {
                    setOverlayAtPositionArr(this.plantInfo.harvestableId, this.arrayX, this.arrayY);
                    this.state = 1;
                }
            }
            this.currentFrames++;
        }
    }
}

class Animal {
    constructor(arrayX, arrayY, animalName) {
        this.x = arrayX * worldTileSize;
        this.y = arrayY * worldTileSize;

        console.log(this.x, this.y);
        this.animalName = animalName;
        this.animalInfo = animalInfoAll[animalName];
        this.spritePos = 0;
        this.currentFrames = 0;
        this.maxFrames = 20;
        this.walkingTimer = 0;
        this.maxWalkingTimer = 160;
        this.restingTimer = 239;
        this.maxRestingTimer = 240;
        // 0 = growing
        // 1 = harvestable
        this.state = 0;
        // 0 = down
        // 1 = up
        // 2 = left
        // 3 = right
        // 4 = sleeping
        this.direction = 0;
        this.tilesPerRow = this.animalInfo.img.width / this.animalInfo.tileSize;
        this.walking = false;
        this.speed = 0.2;
    }

    noAnimalsOrPlayer(realX, realY) {
        for (let index = 0; index < animalArr.length; index++) {
            if (animalArr[index] === this) {
                continue;
            }
            if (dist(realX, realY, animalArr[index].x, animalArr[index].y)
                <= (animalArr[index].animalInfo.tileSize / 2 + this.animalInfo.tileSize / 2)) {
                return false;
            }
        }
        if (dist(realX, realY, player.x - offsetX, player.y - offsetY) <= player.tileSize / 2 + this.animalInfo.tileSize / 2) {
            return false;
        }
        return true;
    }

    getWorldTileAtPosition(realX, realY) {
        // convert screen coordinates into array coordinates
        let arrayX = int(realX / worldTileSize);
        let arrayY = int(realY / worldTileSize);

        let id = world[arrayY][arrayX];
        return id;
    }

    getOverlayTileAtPosition(realX, realY) {
        // convert screen coordinates into array coordinates
        let arrayX = int(realX / worldTileSize);
        let arrayY = int(realY / worldTileSize);

        let id = overlay[arrayY][arrayX];
        return id;
    }

    lookAtPlayer(screenX, screenY) {
        let realX = screenX - offsetX;
        let realY = screenY - offsetY;
        if (dist(realX, realY, this.x, this.y) > (this.animalInfo.tileSize / 2 + player.tileSize / 2)) {
            return;
        }
        let slope;
        if (realX < this.x) {
            slope = (this.y - realY) / (this.x - realX);
        } else {
            slope = (realY - this.y) / (realX - this.x);
        }
        if (slope > 0) {
            if (slope < 1) {
                if (this.x > realX) {
                    this.direction = 2;
                } else {
                    this.direction = 3;
                }
            } else {
                if (this.y > realY) {
                    this.direction = 1;
                } else {
                    this.direction = 0;
                }
            }
        } else {
            if (slope > -1) {
                if (this.x > realX) {
                    this.direction = 2;
                } else {
                    this.direction = 3;
                }
            } else {
                if (this.y > realY) {
                    this.direction = 1;
                } else {
                    this.direction = 0;
                }
            }
        }
        if (this.animalName === "cow") {
            milk.amount = milk.amount + 1;
            console.log(milk.amount);
            moo.play();
        }
        if (this.animalName === "chicken") {
            eggs.amount = eggs.amount + 1;
            console.log(eggs.amount);
            cluck.play();
        }
        this.spritePos = 0;
        this.currentFrames = 0;
        this.walkingTimer = 0;
        this.restingTimer = 0;
        this.walking = false;



    }

    moveAndDisplay() {
        imageMode(CENTER);
        // this chicken png has the left and right images flipped from the others :(
        // how inconvenient
        if (this.animalName === 'chicken') {
            let directionTemp;
            if (this.direction === 2) {
                directionTemp = 3;
            } else if (this.direction === 3) {
                directionTemp = 2;
            } else {
                directionTemp = this.direction;
            }
            drawTile(this.animalInfo.img, (directionTemp * this.tilesPerRow) + this.spritePos,
                this.animalInfo.tileSize, this.animalInfo.tileSize,
                this.x + offsetX, this.y + offsetY);
        } else {
            drawTile(this.animalInfo.img, (this.direction * this.tilesPerRow) + this.spritePos,
                this.animalInfo.tileSize, this.animalInfo.tileSize,
                this.x + offsetX, this.y + offsetY);
        }

        if (this.walking) {
            if (this.currentFrames >= this.maxFrames) {
                if (this.spritePos + 1 < this.tilesPerRow) {
                    this.spritePos++;
                } else {
                    this.spritePos = 0;
                }
                this.currentFrames = 0;
            }
            this.currentFrames++;

            if (this.direction === 0) {
                this.y += this.speed;
            } else if (this.direction === 1) {
                this.y -= this.speed;
            } else if (this.direction === 2) {
                this.x -= this.speed;
            } else if (this.direction === 3) {
                this.x += this.speed;
            }

            if (this.walkingTimer >= this.maxWalkingTimer) {
                this.walkingTimer = 0;
                this.walking = false;
            }
            this.walkingTimer++;
        } else {
            this.spritePos = 0;
            this.restingTimer++;
            if (this.restingTimer >= this.maxRestingTimer) {
                this.direction = int(random(5));
                this.restingTimer = 0;

                if (this.direction === 0) {
                    if (!isSolid(this.getWorldTileAtPosition(this.x, this.y + (this.maxWalkingTimer * this.speed)))
                        && !isSolid(this.getOverlayTileAtPosition(this.x, this.y + (this.maxWalkingTimer * this.speed)))
                        && this.noAnimalsOrPlayer(this.x, this.y + (this.maxWalkingTimer * this.speed))) {
                        if (random(3) < 2) {
                            this.walking = true;
                        }
                    }
                } else if (this.direction === 1) {
                    if (!isSolid(this.getWorldTileAtPosition(this.x, this.y - (this.maxWalkingTimer * this.speed)))
                        && !isSolid(this.getOverlayTileAtPosition(this.x, this.y - (this.maxWalkingTimer * this.speed)))
                        && this.noAnimalsOrPlayer(this.x, this.y - (this.maxWalkingTimer * this.speed))) {
                        if (random(3) < 2) {
                            this.walking = true;
                        }
                    }
                } else if (this.direction === 2) {
                    if (!isSolid(this.getWorldTileAtPosition(this.x - (this.maxWalkingTimer * this.speed), this.y))
                        && !isSolid(this.getOverlayTileAtPosition(this.x - (this.maxWalkingTimer * this.speed), this.y))
                        && this.noAnimalsOrPlayer(this.x - (this.maxWalkingTimer * this.speed), this.y)) {
                        if (random(3) < 2) {
                            this.walking = true;
                        }
                    }
                } else if (this.direction === 3) {
                    if (!isSolid(this.getWorldTileAtPosition(this.x + (this.maxWalkingTimer * this.speed), this.y))
                        && !isSolid(this.getOverlayTileAtPosition(this.x + (this.maxWalkingTimer * this.speed), this.y))
                        && this.noAnimalsOrPlayer(this.x + (this.maxWalkingTimer * this.speed), this.y)) {
                        if (random(3) < 2) {
                            this.walking = true;
                        }
                    }
                } else {
                    this.walking = true;
                }
            }
        }
        imageMode(CORNER);
    }
}
class Item {
    constructor(itemName, itemAmount, img) {
        this.name = itemName;
        this.amount = itemAmount;
        this.graphic = img;
    }
}
